<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">

	<!-- 회원 정보 조회 -->
  	<select id="selectAllMember" parameterType="String" resultType="memberVo">
  		select * from member
  		where mem_email = #{mem_email}
  		and mem_exdate is null
  	</select>
  	
  	<!-- 개별 회원 정보 조회 -->
  	<select id="selectMember" parameterType="String" resultType="memberVo">
  		select mem_email, mem_nm, mem_gndr, job_no, job_nm, mem_age
  		from member inner join job 
  		on (mem_job = job.JOB_NO)
  		where mem_email = #{mem_email}
  	</select>
  	
  	
  	
  	
  	
  	<!-- 회원수정 -->
  	<update  id="updateUser" parameterType="memberVo">
		update member
		set 
 		mem_email=#{mem_email},
			mem_nm = #{mem_nm},
			mem_gndr=#{mem_gndr},
			mem_job=#{mem_job},
			mem_age=#{mem_age}
		where mem_email = #{mem_email}
	</update >
	
  	
  	<!-- 회원가입 -->
	<insert id="signUpSelection" parameterType="memberVo">
		insert into member (mem_no, mem_email, mem_pass, mem_nm, mem_gndr, mem_job, mem_date, mem_age, mem_lvl)
		values (seq_mem_no.nextval , #{mem_email}, #{mem_pass}, #{mem_nm},#{mem_gndr, jdbcType=CHAR}, #{mem_job, jdbcType=NUMERIC}, sysdate, #{mem_age, jdbcType=VARCHAR}, 3)  
	</insert>
	
	<!-- 직업정보 받아오기 -->
	<select id="job" resultType="memberVo">
		select * from job
		where job_nm is not null
	</select>
	
	<!-- 관심사정보 받아오기 -->
	<select id="interest" resultType="memberVo">
		select *  from interest
	</select>
	
	<!-- 닉네임 중복검사  -->
	<select id="check_nm" parameterType="String" resultType="int">
		select count(*) 
		from member 
		where mem_nm = #{mem_nm}
	</select> 
	
	<delete id="delete" >
		Delete From member
	</delete>
	
	<!-- 찜리스트 -->
	<select id="steam" resultType="steamVo" parameterType="int">
		 SELECT A.ARTCL_GU, A.ARTCL_DONG, A.ARTCL_ZIP, A.ARTCL_RD,F.FAVOR_NO,
		    (CASE WHEN A.ARTCL_COMPLX IS NOT NULL  THEN A.ARTCL_COMPLX
		             WHEN A.ARTCL_NM IS NOT NULL THEN A.ARTCL_NM
		             WHEN A.ARTCL_COMPLX IS NULL OR A.ARTCL_NM IS NULL THEN '주택'
		             ELSE A.ARTCL_RD 
		         END)  AS ARTCL_NM, 
		         (select ROUND(AVG(D.DL_RNT)) from deal D where D.DL_GU = A.ARTCL_GU AND D.DL_DONG = A.ARTCL_DONG AND D.DL_ZIP = A.ARTCL_ZIP AND D.DL_RD = A.ARTCL_RD
		                                      and f.favor_ty = d.dl_ty) as dl_rnt,  --월세 평균액
		                                      (select ROUND(AVG(D.DL_DEPOS)) from deal D where D.DL_GU = A.ARTCL_GU AND D.DL_DONG = A.ARTCL_DONG AND D.DL_ZIP = A.ARTCL_ZIP AND D.DL_RD = A.ARTCL_RD
		                                      and f.favor_ty = d.dl_ty) as dl_depos, -- 보증금 평균액
		                                      (select ROUND(AVG(D.DL_PRICE)) from deal D where D.DL_GU = A.ARTCL_GU AND D.DL_DONG = A.ARTCL_DONG AND D.DL_ZIP = A.ARTCL_ZIP AND D.DL_RD = A.ARTCL_RD
                                     		 and f.favor_ty = d.dl_ty) as dl_price -- 매매 평균액
        FROM FAVORITE F JOIN ARTICLE A ON (F.FAVOR_GU = A.ARTCL_GU AND F.FAVOR_DONG = A.ARTCL_DONG AND F.FAVOR_ZIP = A.ARTCL_ZIP AND F.FAVOR_RD = A.ARTCL_RD)
		WHERE FAVOR_MEM = #{favor_mem}
	</select>
	
	<!-- 찜목록 삭제 -->
	<delete id="favorDelete" parameterType="int">
		DELETE from FAVORITE
        where favor_no = #{favor_no}
	</delete>
	
	<!-- 보안설정 (비밀변호 변경)-->
	<update id="passChange" parameterType="memberVo">
		update member 
		set mem_pass = #{mem_new_pass} 
		where mem_email = #{mem_email}
		  and mem_pass = #{mem_pass}
	</update>
	
	
	<!-- 회원탈퇴 -->
	<update id="memDelete" parameterType="memberVo">
		UPDATE member
		set mem_exdate = sysdate
		where mem_pass = #{mem_pass}
		and mem_email = #{mem_email}
	</update>
	
	<!-- 비밀번호 찾기 -->
	<update id="mailFinsh" parameterType="memberVo">
		UPDATE member
		SET mem_pass = #{mem_pass}
		WHERE mem_email = #{mem_email}
	</update>
</mapper>






















